import os
import threading
import time

from flask import Flask, send_file
import telebot
import requests

# –ó–∞–º—ñ–Ω—ñ—Ç—å 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥ BotFather
BOT_TOKEN = '8264718582:AAGly9dsfTerEak5GbcfGDA5lRDlOndqSbg'

# URL-–∞–¥—Ä–µ—Å–∏ –≤–∞—à–æ–≥–æ API Google Apps Script
GOOGLE_SHEET_API_ACCESSORIES = 'https://script.google.com/macros/s/AKfycbzt1Hf_6copt-mWjGFzKo78lloDEYAsoDvIIN_IgAPKyyRm348g3O7e9eB5Ouh-gIlEpA/exec'
GOOGLE_SHEET_API_FILMS = 'https://script.google.com/macros/s/AKfycbwxXf15evwxyGu_0eC2kFHdWnHw3jLS8jEkKgJZjO3mPl7COmGUUGlrKq2uDRqsIy5bAw/exec'

bot = telebot.TeleBot(BOT_TOKEN)

# Dictionary mapping category names to emojis
category_icons = {
    "–ù–∞–≤—É—à–Ω–∏–∫–∏": "üéß",
    "–ê–∫—É—Å—Ç–∏–∫–∞": "üîä",
    "–ú–∏—à–∞ –∫–æ–º–ø.": "üñ±Ô∏è",
    "–ù–∞–±—ñ—Ä –ø–æ—Å—É–¥—É": "üçΩÔ∏è",
    "–°–∫–æ–≤–æ—Ä–æ–¥–∞": "üç≥",
    "–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞": "‚å®Ô∏è",
    "–í–∏—Ä—ñ–∑–Ω–∞ 6.5'": "üõ°Ô∏è",
    "–í–∏—Ä—ñ–∑–Ω–∞ 11'": "üß±",
    "–í–∏—Ä—ñ–∑–Ω–∞ 13'": "üíé"
}

pma_icons = {
    "SPUSH": "üî• –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç",
    "Spush": "üî• –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç",
    "spush": "üî• –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç",
    "SHELF": "‚úÖ –ù–∞ —Å–∫–ª–∞–¥—ñ",
    "Shelf": "‚úÖ –ù–∞ —Å–∫–ª–∞–¥—ñ",
    "shelf": "‚úÖ –ù–∞ —Å–∫–ª–∞–¥—ñ"
}


# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ /start —ñ /–ø—Ä–∏–≤—ñ—Ç ---
@bot.message_handler(commands=['start', '–ø—Ä–∏–≤—ñ—Ç'])
def send_greeting_and_button(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add('‚ú® –ê–∫—Å–µ—Å—É–∞—Ä–∏ –¢–û–ü –°–ö–Æ')
    keyboard.add('üì± –ü–ª—ñ–≤–∫–∞ —Ç–∞ —Å–∫–ª–æ')
    greeting_text = (
        f"üëã –í—ñ—Ç–∞—é, {message.from_user.username}, –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–º—É –±–æ—Ç—ñ –º–∞–≥–∞–∑–∏–Ω—É ¬´–ú–û–°–¢ 1¬ª! üëã\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¢–û–ü –°–ö–Æ –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –ø–ª—ñ–≤–∫–∞–º!"
    )
    bot.send_message(message.chat.id, greeting_text, reply_markup=keyboard)


# --- –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–∫—Å–µ—Å—É–∞—Ä–∏ –¢–û–ü –°–ö–Æ" ---
@bot.message_handler(func=lambda message: message.text == '‚ú® –ê–∫—Å–µ—Å—É–∞—Ä–∏ –¢–û–ü –°–ö–Æ')
def handle_top_sku_button(message):
    status_message = bot.send_message(message.chat.id, "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    try:
        response = requests.get(GOOGLE_SHEET_API_ACCESSORIES)
        response.raise_for_status()
        
        data = response.json()
        categories = data.get('categories', [])

        if not categories:
            bot.edit_message_text("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü—ñ. –ú–æ–∂–ª–∏–≤–æ, —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", 
                                  chat_id=status_message.chat.id, 
                                  message_id=status_message.message_id)
            return

        inline_keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for category in categories:
            button_text = f"{category_icons.get(category, '')} {category}".strip()
            buttons.append(telebot.types.InlineKeyboardButton(text=button_text, callback_data=f"accessories_{category}"))
        
        for i in range(0, len(buttons), 2):
            if i + 1 < len(buttons):
                inline_keyboard.add(buttons[i], buttons[i+1])
            else:
                inline_keyboard.add(buttons[i])

        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤:", chat_id=status_message.chat.id, 
                              message_id=status_message.message_id, reply_markup=inline_keyboard)

    except requests.exceptions.RequestException as e:
        bot.edit_message_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ API: {e}", 
                              chat_id=status_message.chat.id, 
                              message_id=status_message.message_id)
    except Exception as e:
        bot.edit_message_text(f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}", 
                              chat_id=status_message.chat.id, 
                              message_id=status_message.message_id)

# --- –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–ª—ñ–≤–∫–∞ —Ç–∞ —Å–∫–ª–æ" ---
@bot.message_handler(func=lambda message: message.text == 'üì± –ü–ª—ñ–≤–∫–∞ —Ç–∞ —Å–∫–ª–æ')
def handle_film_button(message):
    status_message = bot.send_message(message.chat.id, "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    try:
        response = requests.get(GOOGLE_SHEET_API_FILMS)
        response.raise_for_status()
        
        data = response.json()
        categories = data.get('categories', [])
        
        if not categories:
            bot.edit_message_text("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü—ñ. –ú–æ–∂–ª–∏–≤–æ, —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", 
                                  chat_id=status_message.chat.id, 
                                  message_id=status_message.message_id)
            return

        inline_keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for category in categories:
            button_text = f"{category_icons.get(category, '')} {category}".strip()
            buttons.append(telebot.types.InlineKeyboardButton(text=button_text, callback_data=f"films_{category}"))
        
        for i in range(0, len(buttons), 2):
            if i + 1 < len(buttons):
                inline_keyboard.add(buttons[i], buttons[i+1])
            else:
                inline_keyboard.add(buttons[i])

        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–ª—ñ–≤–æ–∫ —Ç–∞ —Å—Ç–µ–∫–æ–ª:", chat_id=status_message.chat.id, 
                              message_id=status_message.message_id, reply_markup=inline_keyboard)
    
    except requests.exceptions.RequestException as e:
        bot.edit_message_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ API: {e}", 
                              chat_id=status_message.chat.id, 
                              message_id=status_message.message_id)
    except Exception as e:
        bot.edit_message_text(f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}", 
                              chat_id=status_message.chat.id, 
                              message_id=status_message.message_id)


# --- –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_inline_button_click(call):
    
    bot.answer_callback_query(call.id)
    status_message = bot.send_message(call.message.chat.id, "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...")

    try:
        data_parts = call.data.split('_', 1)
        source_type = data_parts[0]
        category_name = data_parts[1]
        
        api_url = GOOGLE_SHEET_API_ACCESSORIES if source_type == 'accessories' else GOOGLE_SHEET_API_FILMS
        
        response = requests.get(f"{api_url}?category={category_name}")
        response.raise_for_status()
        
        data = response.json()
        items_data = data.get('data', [])

        if not items_data:
            bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
            bot.send_message(call.message.chat.id, f"–ù–∞ –∂–∞–ª—å, —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_name}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)

        message_text_header = f"*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name}*\n\n"
        bot.send_message(call.message.chat.id, message_text_header, parse_mode='Markdown')
        for item in items_data:
            link = item.get('link')
            sku = item.get('item_name')
            description = item.get('item_content')
            brand = item.get('item_brand')
            rma = item.get('rma')
            rma_text = pma_icons.get(rma, "")
            price = item.get('price')

            cleaned_description = description.replace(f"{sku}", "").replace(" :", "").replace(";", "").strip()
            if price:
                if link:
                    message_text = f"SKU: {sku}\nPRICE: {price} –≥—Ä–Ω.\n*–†–ú–ê: {rma_text}*\nBRAND: {brand}\nNAME: **[{cleaned_description}]({link})**\n\n"
                else:
                    message_text = f"SKU: {sku}\nPRICE: {price} –≥—Ä–Ω.\n*–†–ú–ê: {rma_text}*\nBRAND: {brand}\nNAME: **{cleaned_description}**\n\n"
            else:
                if link:
                    message_text = f"SKU: {sku}\n*–†–ú–ê: {rma_text}*\nBRAND: {brand}\nNAME: **[{cleaned_description}]({link})**\n\n"
                else:
                    message_text = f"SKU: {sku}\n*–†–ú–ê: {rma_text}*\nBRAND: {brand}\nNAME: **{cleaned_description}**\n\n"
            

            bot.send_message(call.message.chat.id, message_text, parse_mode='Markdown')

    except requests.exceptions.RequestException as e:
        bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
        bot.send_message(call.message.chat.id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
    except Exception as e:
        bot.delete_message(chat_id=status_message.chat.id, message_id=status_message.message_id)
        bot.send_message(call.message.chat.id, f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def run_bot():
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ... –ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(5)

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ---
def run_flask():
    app.run(port=int(os.environ.get('PORT', 80)), host='0.0.0.0')

app = Flask(__name__)

@app.route("/")
def index():
    return send_file('src/index.html')


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    flask_thread = threading.Thread(target=run_flask)
    bot_thread = threading.Thread(target=run_bot)
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    flask_thread.start()
    bot_thread.start()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    # flask_thread.join()
    # bot_thread.join()